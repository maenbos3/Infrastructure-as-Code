AWSTemplateFormatVersion: 2010-09-09
Description: Networking Resources
Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: myVPC

  publicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1a"
      VpcId: !Ref myVPC
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: publicSubnet1

  publicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1b"
      VpcId: !Ref myVPC
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: publicSubnet2

  privateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1a"
      VpcId: !Ref myVPC
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: privateSubnet1

  privateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1b"
      VpcId: !Ref myVPC
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: privateSubnet2

  mySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: mySG
      GroupDescription: Security group for load balancer
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  instanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: instanceSG
      GroupDescription: Security group for ec2 instance
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref mySG
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22  
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  dbSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: dbSG
      GroupDescription: Security group for ec2 instance
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref instanceSG
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  myEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  myEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  myNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
         SubnetId: !Ref publicSubnet1
         AllocationId: !GetAtt myEIP.AllocationId

  myNATGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
         SubnetId: !Ref publicSubnet2
         AllocationId: !GetAtt myEIP2.AllocationId

  myIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: myIGW
  
  attachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref myIGW

  myPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
      - Key: Name
        Value: myPublicRouteTable

  myPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
      - Key: Name
        Value: myPrivateRouteTable

  internetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref myPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myIGW

  myPublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicSubnet1
      RouteTableId: !Ref myPublicRouteTable

  myPublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicSubnet2
      RouteTableId: !Ref myPublicRouteTable

  myPrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privateSubnet1
      RouteTableId: !Ref myPrivateRouteTable

  myPrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privateSubnet2
      RouteTableId: !Ref myPrivateRouteTable

Outputs:
    privateSubnet1Id:
      Value: !Ref privateSubnet1
      Export:
        Name: privateSubnet1Id

    privateSubnet2Id:
      Value: !Ref privateSubnet2
      Export:
        Name: privateSubnet2Id

    publicSubnet1Id:
      Value: !Ref publicSubnet1
      Export:
        Name: publicSubnet1Id

    publicSubnet2Id:
      Value: !Ref publicSubnet2
      Export:
        Name: publicSubnet2Id

    instanceSG:
      Value: !Ref instanceSG
      Export:
        Name: instanceSG

    mySG:
      Value: !Ref mySG
      Export:
        Name: mySG

    dbSG:
      Value: !Ref dbSG
      Export:
        Name: dbSG
